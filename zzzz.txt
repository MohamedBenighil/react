==================2 setting up the env
-nodejs npm
-vs (es7 react, bracket paire colorier, autorename tag)
-git
-react dev tool
-redux dev tools 
-postman used in second project
- format on save (setting -> search for : format on save -> check the format on save checkbox)

==================Lesson 3. Project Introduction
objectif: 
-class base component 
-stateless functional component 

we have:
user component 
  user item component
clear component 
more button -> react router to another page : to show latest repo 
==================Lesson 4. Create React App & File Structure
npx create-react-app .
NB the most important things:
- package.json -> fot dependencies 
- public/index.html -> the main/root app component
- src/index.js -> contains App component which is rendred to root component
npm run build -> to deploy it 
npm start -> run the dev server 
NB component are : functions(can have a state) or classes (can have a state, it can have hooks) 

==================Lesson 5. CRA Cleanup & Prepare
NB remove :
- src/Apptestjs
- src/index.css 
- src/logo.svg
- src/serviceWorker.js  reportwebvital.js & setupTests.js  
NB change the App.css by the attached 
NB in App.js : we changed function to class
NB next lecture we look to jsx (html inside render)

=================Lesson 6. Intro To JavaScripteXtention JSX & Fragments
NB remeber the follwong wahne copy/paste html :
- for -> forHTML
- class -> className 
NB JSX must have one tag parent 
NB use React.fragement or <Navbar> instead of dic to hide div parent and return 2 children inside it  
NB without JSX, use React.createElement('name', {att: 'value'}, 'content')

==================Lesson 7. Expressions & Conditionals In JSX
inside jsx:
{loading ? <h1>loading</h1>: <h1>Hello {shoname && name}</h1>}

==================Lesson 8. Components, Props & PropTypes
src/components/navbar/NavBar.js -> rce :to generate class based view

NB we need 4 things from https://api.github.com/users : login,  id, photo link, profile 
create src/components/users -> anything related to user
- UserItem.js -> rce + tab : generate class based view 
- www.fontawsome.com/start -> to use icons -> and paste it public/html
NB props are arguments of components
NB impt -> to import PropType to give a type to props


static defaultProps ={
  icon: "fa fa-github",
  title: "Github Finder"
} 
static defaultTypes = {
  title: PropTypes.string.isRequired
  icon: PropTypes.string.isRequired
}
NB if you pass array instead of string, yo see warining on inspect
nav.navbar.bg-primary 
<nav className="navbar bg-primary">
  <h1>
    i.fa.fa-github 
    <i className={this.props.icon}/> {this.props.title}
  </h1>
</nav>

NB in App.js
- import Navbar
- use it </Navbar> 

==================Lesson 9. Getting Started With Component State 
NB when you add a component, made it basic to see it in app component.
NB in class, we define a sate object at class level or constructor level (do not forget the super)
NB next lesson, we create Users componenet (having stae of all users ), it will contains all userItem components. and passes the state(liste of users) via props 

==================Lesson 10. Lists & Passing State With Props
- create Users compoenent : component/users/Users.js ans create state having a list of users
- import UserItem on Users 
- pass the data via props 
- look at the repeating (remove the state section from Useritem)
- the UserItem & Navbar have no state, in next lesson we transform them into function component instead of class  
NB be carful: arrow function with () in react (because jsx )  instead of {} in react 
- to add margin, you can use .container class on Uuser compoenent in App.js
- you can also add css style without {{}}, by definig an abject 
- Notice the warrning "key must be unique" in Users, and fix it with key={user.id}

==================Lesson 11. Stateless Functional Components
- we will transform all class based component (which doesn't have a state) to functional component
- but at the end we have just functional component beacause we use hook (at this moment, functional compoenent have a state) 
- props will be passed as parameter of function, and we don't nee render render methode
- if a class has a static att, then use <func_name>.<static_att>
- destructor user and its att from props
- next lesson we move our users data to main component, and we will fetch the api 

==================Lesson 12. HTTP Requests & Updating State
- componentDidMount() -> lifcyle methode : executed once the compoenent is mounted.
- npm i axios -> equivalent to fetch in App component because we have all compoenent here to send them data if necessary
- define state object with data (empty table) and loading: false (for spiner)
- to update a value of state, use this.setState() instead of this.state.att


==================Lesson 13. Spinner Component & Refactoring
- racf -> creates arrow function  
- in component, if we have just return, then we can delete {}
- always import imaes in varibale before use them in src
- do not forget the PropType in spiner
- in next video ae add github api credentials to do not allow our api to be exhausted 

==================Lesson 14. Environment Variables
- clg -> console.log
- create file .env.local having client_id & client_secret then restart the server
- add them to url process.env.<REACT_APP_VAR_NAME> : client_id=${}&client_secret=${} ->google: github register app
- notice you have to satrt the env with REACT_APP
- next lesson we add search component

==================Lesson 15. Events & Search Component
- when we have a forme, we attach it's input to state.
- this.setState(text "e.target.name": e.target.value )
- Now what we want to do is when we click on serch buton, it takes the content of text (defined in state ) and calll the api


==================Lesson 16. Passing Props Up & Search
- we can send function (not just variables) through props
- next video we add clear btn

==================Lesson 17. Clear Users From State
- the clear button should be in the same component (Search) but outside of form
- the button should not appear if when the page is empty
- next video we show alert if the user sends empty data


==================Lesson 18. Alert State & Component
- define alert component.
- the alert button should take 3s (you can add close button)
- call setAlert on Search component within onSubmit methode, and define it on App component.
- next video we imlpement react router because when we click on more button, we like to rest on the same page and get more data.

==================Lesson 19. React Router Setup
npm i react-router-dom 
App : import {BrowserRouter as Router, Switch, Route } from 'react-router-dom'
wrap evrything in <Router>
how to put multiple component in single Route? :
<Switch>
  <Route exact path='/' render={props => (  => multiple compoenent
    <Fragment>
      <Search>
      <Users>
    </Fragment>
  )}/>
  <Route exact path="/about" compoenent={About}/> => single component
</Switch>

Lets create About component

go to navbar and create about and home:
import {Link} from 'react-route-dom'
NB do not use <a href... tag (because it will refresh and clear the state) use <Link to... instead

==================Lesson 20. Single User Component & Data
App: create getUser = (username) -> to get user infos which will be stored in user object in state
create new User compenent (based class because of componenetDidMount having getUser defined in App )
App : import User component 
App: Create new route to User
App: since we have stuff to pass in (getUser, ...props, user, loading ), the we use the <Route exact path='/'... format instead of <Route exact path="/about"...
NB you have to pass props and {...props } else: you get a error : match undefined
UserItem: to={`/user/{login}`} -> login is defined as input of the component.
User: pull username from url and call getUser(): componentDidMount(){this.props.getuser(this.props.match.params.login}

Next video we will desing the UI

==================Lesson 21. User Component UI & Layout
creat a button (link) to go to home
crate: Hireable * or - (get the value from hirable) 
we have one Card with 2 grids
we have 1 Card with one grid

================== Lesson 22. Repos & RepoItem Component & Data
App: add getUserRepo() & state.repos=[] then pass them to User.
User: call getUserRepo() then pass this.props.repos to Repos component.
Repos: get repos and map throw them then pass each repo to  RepoItem.
RepoItem: get one repo and desing RepoItem with that repo.

================== Lesson 23. Search Class to Function With useState Hook
Search: convert from class having sate to function using useState hook
rplace state with const [text,setText] = useState('')
to convert method to function (inside function) you have to add const 

================== Lesson 24. User Class to Function With useEffect Hook
User: convert from class having componenetDidMount methode to function using useEffect hook
useEffect has 2 input: call back and array (of arrays in which when updated, the component updates as well )
add //eslint-desable-next-line to avoid the showing warning

================== Lesson 25. App Class to Function Component
convert App to function.
notice that App is cantains a lot of code, next lesso we user context api to manage App better.

================== Lesson 26. Implementing Context (new kooks: use_context & use_reducer )
context-api (for small and medium app ) is alternative to redux(for large app) when you want to manage app level state.

each ressource has these 3 files:
src/context/github/githubContext.js
src/context/github/GithubState.js : 
having all context ex: if we call action to fetch data, so it will be here 
initial state + actions(call github)
we will use Types: src/context/types.js: are string variable that you call to change your state within your reducer
src/context/github/githubReducer.js   reducer: what happen to state based on action  
once you have your state file got to App then import GithubState then wrapp all app inside <GithubState>


Steps:
1. githubContext.js : initialize new context : with createContext()
2. GithubState.js : state + actions  
3. Types.js: which is relevant to all github context(githubContext,githubReducer, GithubState) having variables that you can call
             to change the state within your reducer  
4. githubReducer: is just function wich takes state and action as input parameter

================== Lesson 27. Create Reducer & Actions
we want to move evrything from App.js to GithubState.js
reducer : change the state of certain componenent when needed 
we move function from App to State and use them as Action then i will show you how to connect to context with individual compenent
    using the use_context hook 

GithubState: dispatch(whaterver)
githubReducer: put whatever to state and send it down to any component

githubReducer: ...state -> make a copy of state 


