==================2 setting up the env
-nodejs npm
-vs (es7 react, bracket paire colorier, autorename tag)
-git
-react dev tool
-redux dev tools 
-postman used in second project
- format on save (setting -> search for : format on save -> check the format on save checkbox)

==================Lesson 3. Project Introduction
objectif: 
-class base component 
-stateless functional component 

we have:
user component 
  user item component
clear component 
more button -> react router to another page : to show latest repo 
==================Lesson 4. Create React App & File Structure
npx create-react-app .
NB the most important things:
- package.json -> fot dependencies 
- public/index.html -> the main/root app component
- src/index.js -> contains App component which is rendred to root component
npm run build -> to deploy it 
npm start -> run the dev server 
NB component are : functions(can have a state) or classes (can have a state, it can have hooks) 

==================Lesson 5. CRA Cleanup & Prepare
NB remove :
- src/Apptestjs
- src/index.css 
- src/logo.svg
- src/serviceWorker.js  reportwebvital.js & setupTests.js  
NB change the App.css by the attached 
NB in App.js : we changed function to class
NB next lecture we look to jsx (html inside render)

=================Lesson 6. Intro To JavaScripteXtention JSX & Fragments
NB remeber the follwong wahne copy/paste html :
- for -> forHTML
- class -> className 
NB JSX must have one tag parent 
NB use React.fragement or <Navbar> instead of dic to hide div parent and return 2 children inside it  
NB without JSX, use React.createElement('name', {att: 'value'}, 'content')

==================Lesson 7. Expressions & Conditionals In JSX
inside jsx:
{loading ? <h1>loading</h1>: <h1>Hello {shoname && name}</h1>}

==================Lesson 8. Components, Props & PropTypes
src/components/navbar/NavBar.js -> rce :to generate class based view

NB we need 4 things from https://api.github.com/users : login,  id, photo link, profile 
create src/components/users -> anything related to user
- UserItem.js -> rce + tab : generate class based view 
- www.fontawsome.com/start -> to use icons -> and paste it public/html
NB props are arguments of components
NB impt -> to import PropType to give a type to props


static defaultProps ={
  icon: "fa fa-github",
  title: "Github Finder"
} 
static defaultTypes = {
  title: PropTypes.string.isRequired
  icon: PropTypes.string.isRequired
}
NB if you pass array instead of string, yo see warining on inspect
nav.navbar.bg-primary 
<nav className="navbar bg-primary">
  <h1>
    i.fa.fa-github 
    <i className={this.props.icon}/> {this.props.title}
  </h1>
</nav>

NB in App.js
- import Navbar
- use it </Navbar> 

==================Lesson 9. Getting Started With Component State 
NB when you add a component, made it basic to see it in app component.
NB in class, we define a sate object at class level or constructor level (do not forget the super)
NB next lesson, we create Users componenet (having stae of all users ), it will contains all userItem components. and passes the state(liste of users) via props 

==================Lesson 10. Lists & Passing State With Props
- create Users compoenent : component/users/Users.js ans create state having a list of users
- import UserItem on Users 
- pass the data via props 
- look at the repeating (remove the state section from Useritem)
- the UserItem & Navbar have no state, in next lesson we transform them into function component instead of class  
NB be carful: arrow function with () in react (because jsx )  instead of {} in react 
- to add margin, you can use .container class on Uuser compoenent in App.js
- you can also add css style without {{}}, by definig an abject 
- Notice the warrning "key must be unique" in Users, and fix it with key={user.id}

==================Lesson 11. Stateless Functional Components
- we will transform all class based component (which doesn't have a state) to functional component
- but at the end we have just functional component beacause we use hook (at this moment, functional compoenent have a state) 
- props will be passed as parameter of function, and we don't nee render render methode
- if a class has a static att, then use <func_name>.<static_att>
- destructor user and its att from props
- next lesson we move our users data to main component, and we will fetch the api 

==================Lesson 12. HTTP Requests & Updating State
- componentDidMount() -> lifcyle methode : executed once the compoenent is mounted.
- npm i axios -> equivalent to fetch in App component because we have all compoenent here to send them data if necessary
- define state object with data (empty table) and loading: false (for spiner)
- to update a value of state, use this.setState() instead of this.state.att


==================Lesson 13. Spinner Component & Refactoring
- racf -> creates arrow function  
- in component, if we have just return, then we can delete {}
- always import imaes in varibale before use them in src
- do not forget the PropType in spiner
- in next video ae add github api credentials to do not allow our api to be exhausted 

==================Lesson 14. Environment Variables
clg -> console.log
create file .env.local having client_id & client_secret then restart the server
add them to url process.env.<REACT_APP_VAR_NAME> : client_id=${}&client_secret=${} ->google: github register app
notice you have to satrt the env with REACT_APP
next lesson we add search component

==================Lesson 15. Events & Search Component
when we have a forme, we attach it's input to state.
this.setState(text "e.target.name": e.target.value )
Now what we want to do is when we click on serch buton, it takes the content of text (defined in state ) and calll the api
